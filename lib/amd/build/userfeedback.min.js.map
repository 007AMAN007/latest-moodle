{"version":3,"sources":["../src/userfeedback.js"],"names":["Selectors","regions","root","actions","give","remind","registerEventListeners","document","addEventListener","e","giveAction","target","closest","preventDefault","giveFeedback","then","recordAction","remove","catch","Notification","exception","remindAction","Ajax","call","methodname","args","contextid","M","cfg","url","window","open","Error","action"],"mappings":"sLAuBA,OACA,O,mDAEA,GAAMA,CAAAA,CAAS,CAAG,CACdC,OAAO,CAAE,CACLC,IAAI,CAAE,qCADD,CADK,CAIdC,OAAO,CAAE,EAJK,CAAlB,CAMAH,CAAS,CAACG,OAAV,CAAkBC,IAAlB,WAA4BJ,CAAS,CAACC,OAAV,CAAkBC,IAA9C,4BACAF,CAAS,CAACG,OAAV,CAAkBE,MAAlB,WAA8BL,CAAS,CAACC,OAAV,CAAkBC,IAAhD,8B,yBAKsC,QAAzBI,CAAAA,sBAAyB,EAAM,CACxCC,QAAQ,CAACC,gBAAT,CAA0B,OAA1B,CAAmC,SAAAC,CAAC,CAAI,CACpC,GAAMC,CAAAA,CAAU,CAAGD,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBZ,CAAS,CAACG,OAAV,CAAkBC,IAAnC,CAAnB,CACA,GAAIM,CAAJ,CAAgB,CACZD,CAAC,CAACI,cAAF,GACAC,CAAY,GACPC,IADL,CACU,UAAM,CACR,MAAOC,CAAAA,CAAY,CAAC,MAAD,CACtB,CAHL,EAIKD,IAJL,CAIU,UAAM,CACR,GAAMb,CAAAA,CAAI,CAAGQ,CAAU,CAACE,OAAX,CAAmBZ,CAAS,CAACC,OAAV,CAAkBC,IAArC,CAAb,CACAA,CAAI,CAACe,MAAL,EAEH,CARL,EASKC,KATL,CASWC,UAAaC,SATxB,CAUH,CAED,GAAMC,CAAAA,CAAY,CAAGZ,CAAC,CAACE,MAAF,CAASC,OAAT,CAAiBZ,CAAS,CAACG,OAAV,CAAkBE,MAAnC,CAArB,CACA,GAAIgB,CAAJ,CAAkB,CACdZ,CAAC,CAACI,cAAF,GACAG,CAAY,CAAC,QAAD,CAAZ,CACKD,IADL,CACU,UAAM,CACR,GAAMb,CAAAA,CAAI,CAAGmB,CAAY,CAACT,OAAb,CAAqBZ,CAAS,CAACC,OAAV,CAAkBC,IAAvC,CAAb,CACAA,CAAI,CAACe,MAAL,EAEH,CALL,EAMKC,KANL,CAMWC,UAAaC,SANxB,CAOH,CACJ,CA3BD,CA4BH,C,IAOKN,CAAAA,CAAY,CAAG,UAAM,CACvB,MAAOQ,WAAKC,IAAL,CAAU,CAAC,CACdC,UAAU,CAAE,2BADE,CAEdC,IAAI,CAAE,CACFC,SAAS,CAAEC,CAAC,CAACC,GAAF,CAAMF,SADf,CAFQ,CAAD,CAAV,EAKH,CALG,EAMFX,IANE,CAMG,SAAAc,CAAG,CAAI,CACT,GAAI,CAACC,MAAM,CAACC,IAAP,CAAYF,CAAZ,CAAL,CAAuB,CACnB,KAAM,IAAIG,CAAAA,KAAJ,CAAU,sBAAV,CACT,CAEJ,CAXE,CAYV,C,CAQKhB,CAAY,CAAG,SAAAiB,CAAM,CAAI,CAC3B,MAAOX,WAAKC,IAAL,CAAU,CAAC,CACdC,UAAU,CAAE,wCADE,CAEdC,IAAI,CAAE,CACFQ,MAAM,CAANA,CADE,CAFQ,CAAD,CAAV,EAKH,CALG,CAMV,C","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Handle clicking on action links of the feedback alert.\n *\n * @module     core/cta_feedback\n * @copyright  2020 Shamim Rezaie <shamim@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\n\nconst Selectors = {\n    regions: {\n        root: '[data-region=\"core/userfeedback\"]',\n    },\n    actions: {},\n};\nSelectors.actions.give = `${Selectors.regions.root} [data-action=\"give\"]`;\nSelectors.actions.remind = `${Selectors.regions.root} [data-action=\"remind\"]`;\n\n/**\n * Attach the necessary event handlers to the action links\n */\nexport const registerEventListeners = () => {\n    document.addEventListener('click', e => {\n        const giveAction = e.target.closest(Selectors.actions.give);\n        if (giveAction) {\n            e.preventDefault();\n            giveFeedback()\n                .then(() => {\n                    return recordAction('give');\n                })\n                .then(() => {\n                    const root = giveAction.closest(Selectors.regions.root);\n                    root.remove();\n                    return;\n                })\n                .catch(Notification.exception);\n        }\n\n        const remindAction = e.target.closest(Selectors.actions.remind);\n        if (remindAction) {\n            e.preventDefault();\n            recordAction('remind')\n                .then(() => {\n                    const root = remindAction.closest(Selectors.regions.root);\n                    root.remove();\n                    return;\n                })\n                .catch(Notification.exception);\n        }\n    });\n};\n\n/**\n * The action function that is called when users choose to give feedback.\n *\n * @returns {Promise<void>}\n */\nconst giveFeedback = () => {\n    return Ajax.call([{\n        methodname: 'core_get_userfeedback_url',\n        args: {\n            contextid: M.cfg.contextid,\n        }\n    }])[0]\n        .then(url => {\n            if (!window.open(url)) {\n                throw new Error('Unable to open popup');\n            }\n            return;\n        });\n};\n\n/**\n * Record the action that the user took.\n *\n * @param {string} action The action that the user took. Either give or remind.\n * @returns {Promise<null>}\n */\nconst recordAction = action => {\n    return Ajax.call([{\n        methodname: 'core_create_userfeedback_action_record',\n        args: {\n            action,\n        }\n    }])[0];\n};\n"],"file":"userfeedback.min.js"}